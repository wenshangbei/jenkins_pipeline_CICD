pipeline {
    agent {
        node {
            label 'jenkins_slave'
        }

    }
    stages {
        stage('Init') {
            steps{
                script{

                    println "welcome to Nick learn"
                    println env.WORKSPACE
                    module_test = load env.WORKSPACE + "/groovy/jenkins-module.groovy"
                    sh 'mkdir workplace'
                }
            }
        }
        stage('Git Source') {
            steps{
                script{
                    dir("${env.WORKSPACE}/workplace"){
                        git branch: 'env/dev', credentialsId: 'jenkins_nickdevops_ssh',url: 'git@github.com:wenshangbei/Jenkins_demo.git'
                    }



                }

            }

        }
        stage('Maven Build') {
            steps {
                script {

                    container('maven') {
                        dir("${env.WORKSPACE}/workplace"){
                            sh 'mvn clean package'
                        }

                    }
                }

            }
        }
        stage('Docker Build') {
            steps {
                script {
                    container('docker') {
                        sh 'docker login -u ' + HARBOR_CREDS_USR  + ' -p ' + HARBOR_CREDS_PSW + ' ' + HARBOR_HOST
                        sh "docker build --build-arg JAR_FILE=`ls workplace/target/*.jar |cut -d '/' -f2` -t " + HARBOR_HOST + "/" + DOCKER_IMAGE + ":" + GIT_TAG + " --no-cache ."
                        sh "docker push " + HARBOR_HOST + "/" + DOCKER_IMAGE + ":" + GIT_TAG
                        sh "docker rmi " + HARBOR_HOST + "/" + DOCKER_IMAGE + ":" + GIT_TAG
                    }
                }
            }
        }
        stage('K8s Deploy') {
            steps {
                script {
                    container('kubectl') {
                        sh "sed -e 's#{IMAGE_URL}#" + HARBOR_HOST + "/" + DOCKER_IMAGE + "#g;s#{IMAGE_TAG}#" + GIT_TAG + "#g;s#{APP_NAME}#" + APP_NAME + "#g;s#{SPRING_PROFILE}#k8s-test#g' k8s-deployment.tpl > k8s-deployment.yml"
                        sh "sed -e 's#{APP_NAME}#" + APP_NAME + "#g;s#{NODE_PORT}#" + NODE_PORT + "#g' k8s-deployment-svc.tpl > k8s-deployment-svc.yml"
                        try{
                            sh "kubectl delete rc " + APP_NAME + " --namespace=" + K8S_NAMESPACE
                        }catch (Exception e) {
                            println e
                        }
                        try{
                            sh "kubectl delete svc " + APP_NAME + " --namespace=" + K8S_NAMESPACE
                        }catch (Exception e) {
                            println e
                        }
                        sh "kubectl apply -f k8s-deployment.yml --namespace=" + K8S_NAMESPACE
                        sh "kubectl apply -f k8s-deployment-svc.yml --namespace=" + K8S_NAMESPACE
                    }
                }

            }
        }
//        stage('API Test') {
//            steps {
//                script {
//                    container('newman') {
//                        dir("${env.WORKSPACE}/workplace"){
//                            try{
//                                sleep 5
//                                sh 'newman run postman/jenkins_demo_test.postman_collection.json'
//                            }catch (Exception e) {
//                                println e
//                            }
//
//                        }
//                    }
//                }
//
//            }
//        }
    }
    post{
        failure {
            script {
                module_test.send_email_results("Failed","Master","1006953115@qq.com")

            }
        }
        success {
            script {

                module_test.send_email_results("Success","Master","1006953115@qq.com")
            }
        }
    }

    environment {
        HARBOR_CREDS = credentials('aliyun_sz_repo_pwd')
//        K8S_CONFIG = credentials('jenkins-k8s-config')
        GIT_TAG = sh(returnStdout: true,script: 'echo ' + BUILD_NUMBER ).trim()
    }
    parameters {
        string(name: 'HARBOR_HOST', defaultValue: 'registry.cn-shenzhen.aliyuncs.com', description: 'harbor仓库地址')
        string(name: 'DOCKER_IMAGE', defaultValue: 'nick_docker_registry/jenkins_demo_dev', description: 'docker镜像名')
        string(name: 'APP_NAME', defaultValue: 'jenkinsdemo', description: 'k8s中标签名')
        string(name: 'NODE_PORT', defaultValue: '30000', description: 'Service端口')
        string(name: 'K8S_NAMESPACE', defaultValue: 'devops', description: 'k8s的namespace名称')
    }
}
